{"version":3,"sources":["../src/index.ts","../src/createLitebook.ts","../src/templates.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport fs from \"fs-extra\";\r\nimport { createLitebook } from \"./createLitebook.js\";\r\n\r\nconst main = async () => {\r\n  // Write name to package.json\r\n  const pkgJson = fs.readJSONSync(\"package.json\");\r\n  pkgJson.scripts = {\r\n    ...pkgJson.scripts,\r\n    litebook: \"vite serve .litebook\",\r\n    \"litebook:build\": \"vite build .litebook\",\r\n  };\r\n  fs.writeJSONSync(\"package.json\", pkgJson, {\r\n    spaces: 2,\r\n  });\r\n  try {\r\n    createLitebook();\r\n  } catch (error) {\r\n    process.stdout.write(\"Litebook already initialized in this repo\");\r\n  }\r\n\r\n  process.exit(0);\r\n};\r\n\r\nmain().catch((err) => {\r\n  process.stderr.write(\"Aborting installation...\");\r\n  if (err instanceof Error) {\r\n    process.stderr.write(JSON.stringify(err));\r\n  } else {\r\n    process.stderr.write(\r\n      \"An unknown error has occurred. Please open an issue on github with the below:\"\r\n    );\r\n    process.stdout.write(err);\r\n  }\r\n  process.exit(1);\r\n});\r\n","import fs from \"fs-extra\";\r\nimport { templates } from \"./templates.js\";\r\n\r\nexport const createLitebook = () => {\r\n  fs.mkdirSync(\".litebook\");\r\n  fs.writeFileSync(\".litebook/index.html\", templates.indexHtml);\r\n  fs.writeFileSync(\".litebook/index.tsx\", templates.indexTsx);\r\n  fs.writeFileSync(\".litebook/vite.config.ts\", templates.viteConfigTs);\r\n  fs.writeFileSync(\".litebook/tsconfig.json\", templates.tsconfigJson);\r\n};\r\n","export const templates = {\r\n  indexHtml: `\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Litebook</title>\r\n  </head>\r\n  <body>\r\n    <div id=\"root\"></div>\r\n    <script type=\"module\" src=\"./index.tsx\"></script>\r\n  </body>\r\n</html>  \r\n  `,\r\n  indexTsx: `\r\nimport React, { useEffect, useState, FC } from 'react';\r\nimport { StrictMode } from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\n\r\nimport '../src/index.css';\r\n\r\nconst App = () => {\r\n  const [stories, setStories] = useState<{\r\n    component: FC,\r\n    meta: { name: string }\r\n  }[]>([])\r\n\r\n  useEffect(() => {\r\n    const load = async () => {\r\n      // @ts-ignore\r\n      const modules = import.meta.glob('../src/**/*.stories.tsx')\r\n      const mods: any[] = [];\r\n      for (const path in modules) {\r\n        const mod = await modules[path]();\r\n        const name = path.split('/').at(-1);\r\n        mods.push({component: mod.default, meta: {name}})\r\n      }\r\n      setStories([...stories, ...mods])\r\n    }\r\n\r\n    try {\r\n      load()\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div className=\"flex h-screen w-screen bg-gray-100 p-4\">\r\n      <aside className=\"w-48\">\r\n        <h1 className=\"text-lg font-medium text-gray-800\">Litebook</h1>\r\n        <p className=\"text-sm text-gray-700\">Story list:</p>\r\n        <nav>\r\n          <ul className=\"mt-1 list-inside space-y-1 text-sm\">\r\n            {stories.map((st, i) => (\r\n              <li key={st.meta.name + i} className=\"cursor-pointer pl-2 text-gray-500 before:content-['-'] hover:text-gray-700 hover:underline\">{st.meta.name}</li>\r\n            ))}\r\n          </ul>\r\n        </nav>\r\n      </aside>\r\n      <main className=\"w-full rounded-lg bg-white p-2 drop-shadow-md\">\r\n        <header>Canvas</header>\r\n        <div>{stories.length >=1 ? stories.map(st => st.component).map(Storie => <Storie key={Storie.name} />) : 'Loading stories...'}</div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\ncreateRoot(document.getElementById('root') as HTMLElement).render(\r\n  <StrictMode>\r\n    <App />\r\n  </StrictMode>\r\n);  \r\n  `,\r\n  viteConfigTs: `\r\n/// <reference types=\"vitest\" />\r\n/// <reference types=\"vite/client\" />\r\nimport { defineConfig, loadConfigFromFile } from 'vite';\r\n\r\nexport default defineConfig(async () => {\r\n  const rootProjectConfig = await loadConfigFromFile({ command: 'serve', mode: 'dev' }, 'vite.config.ts')\r\n\r\n  return {\r\n    resolve: rootProjectConfig?.config.resolve,\r\n    plugins: rootProjectConfig?.config.plugins,\r\n  }\r\n});`,\r\n  tsconfigJson: `\r\n{\r\n  \"extends\": \"../tsconfig.json\",\r\n}`,\r\n};\r\n"],"mappings":";AACA,OAAOA,MAAQ,WCDf,OAAOC,MAAQ,WCAR,IAAMC,EAAY,CACvB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA6DV,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAad,aAAc;AAAA;AAAA;AAAA,EAIhB,ED3FO,IAAMC,EAAiB,IAAM,CAClCC,EAAG,UAAU,WAAW,EACxBA,EAAG,cAAc,uBAAwBC,EAAU,SAAS,EAC5DD,EAAG,cAAc,sBAAuBC,EAAU,QAAQ,EAC1DD,EAAG,cAAc,2BAA4BC,EAAU,YAAY,EACnED,EAAG,cAAc,0BAA2BC,EAAU,YAAY,CACpE,EDLA,IAAMC,EAAO,SAAY,CAEvB,IAAMC,EAAUC,EAAG,aAAa,cAAc,EAC9CD,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,SAAU,uBACV,iBAAkB,sBACpB,EACAC,EAAG,cAAc,eAAgBD,EAAS,CACxC,OAAQ,CACV,CAAC,EACD,GAAI,CACFE,EAAe,CACjB,MAAE,CACA,QAAQ,OAAO,MAAM,2CAA2C,CAClE,CAEA,QAAQ,KAAK,CAAC,CAChB,EAEAH,EAAK,EAAE,MAAOI,GAAQ,CACpB,QAAQ,OAAO,MAAM,0BAA0B,EAC3CA,aAAe,MACjB,QAAQ,OAAO,MAAM,KAAK,UAAUA,CAAG,CAAC,GAExC,QAAQ,OAAO,MACb,+EACF,EACA,QAAQ,OAAO,MAAMA,CAAG,GAE1B,QAAQ,KAAK,CAAC,CAChB,CAAC","names":["fs","fs","templates","createLitebook","fs","templates","main","pkgJson","fs","createLitebook","err"]}